<% if @importer.analyze_csv.blank? %>
	<h1>Es ist ein Fehler aufgetreten</h1>
	<h2>Es sind keine Daten erkannt worden. Ist das Trennzeichen korrekt?</h2>
<% end %>

<%= form_for @importer, :url => admin_import_path(@importer) do |f|%>
	<table class="importer_assoziations">
		<% @importer.assignment_groups ||= {} %>
		<% @importer.assignment_groups[@importer.target_model] ||= "create" %>
		<tr>
			<td class="nested_model_header"><%= @importer.target_model %></td>
			<td><%= f.select "assignment_groups[#{@importer.target_model}]", options_for_select(Goldencobra::Import::DataHandling, @importer.assignment_groups[@importer.target_model]), :include_blank => false %></td>
		</tr>

	<% f.object.get_model_attributes.each do |model_attr| %>
		<% @importer.assignment[model_attr] ||= {} %>
		<tr>
			<td><%= model_attr.humanize %></td>
			<td><%= f.select "assignment[#{model_attr}]['data_function']", options_for_select(["default"], @importer.assignment[model_attr]["data_function"]), :include_blank => false %></td>
			<td><%= f.select "assignment[#{model_attr}]['csv']", options_for_select(f.object.analyze_csv, @importer.assignment[model_attr]["csv"]), :include_blank => true %></td>
		</tr>
	<%end%>

	<% f.object.get_association_names.each do |ass_name| %>
		<% next if f.object.target_model.constantize.new.send(ass_name).nil? %>
		<% @importer.assignment_groups[ass_name] ||= "create" %>
		<tr>
			<td class="nested_model_header"><%= t(ass_name, :scope => [:activerecord, :models]) %></td>
			<td><%= f.select "assignment_groups[#{ass_name}]", options_for_select(Goldencobra::Import::DataHandling, @importer.assignment_groups[ass_name]), :include_blank => false %></td>
		</tr>
		<% f.object.target_model.constantize.new.send(ass_name).new.attributes.delete_if{|a| Goldencobra::Import::BlockedAttributes.include?(a.to_s) }.keys.each do |ass_attr| %>
			<tr>
				<td><%= t(ass_attr, :scope => [:activerecord, :attributes, ass_name.to_sym]) %></td>
				<% @importer.assignment[ass_name] ||= {} %>
				<% @importer.assignment[ass_name][ass_attr] ||= {} %>
				<% @importer.assignment[ass_name][ass_attr]["data_function"] ||= "" %>
				<% current_ass_attr = @importer.assignment[ass_name] ? @importer.assignment[ass_name][ass_attr]['csv'] : "" %>
				<td><%= f.select "assignment[#{ass_name}][#{ass_attr}]['data_function']", options_for_select(["default"], @importer.assignment[ass_name][ass_attr]["data_function"]), :include_blank => false %></td>
				<td><%= f.select "assignment[#{ass_name}][#{ass_attr}]['csv']", options_for_select(f.object.analyze_csv, current_ass_attr ), :include_blank => true %>	</td>
			</tr>
			<% f.object.target_model.constantize.new.send(ass_name).new.class.reflect_on_all_associations.collect { |r| r.name }.delete_if{|a| Goldencobra::Import::BlockedAttributes.include?(a) }.each do |sub_ass_name| %>
				<% next if f.object.target_model.constantize.new.send(ass_name).new.send(sub_ass_name).nil? %>
				<% @importer.assignment_groups[sub_ass_name] ||= "create" %>
				<tr>
					<td class="nested_model_header"><%= t(ass_name, :scope => [:activerecord, :models]) %></td>
					<td><%= f.select "assignment_groups[#{ass_name}][#{sub_ass_name}]", options_for_select(Goldencobra::Import::DataHandling, @importer.assignment_groups[sub_ass_name]), :include_blank => false %></td>
				</tr>
				<% next if Goldencobra::Import::BlockedAttributes.include?(sub_ass_name.to_s) %>
				<% f.object.target_model.constantize.new.send(ass_name).new.send(sub_ass_name).new.attributes.delete_if{|a| Goldencobra::Import::BlockedAttributes.include?(a.to_s) }.keys.each do |sub_ass_attr| %>
					<tr>
						<td><%= t(sub_ass_attr, :scope => [:activerecord, :attributes, ass_name.to_sym, sub_ass_name.to_sym]) %></td>
						<% @importer.assignment[ass_name][sub_ass_name] ||= {} %>
						<% @importer.assignment[ass_name][sub_ass_name][sub_ass_attr] ||= {} %>
						<% @importer.assignment[ass_name][sub_ass_name][sub_ass_attr]["data_function"] ||= "" %>
						<% current_sub_ass_attr = @importer.assignment[ass_name][sub_ass_name] ? @importer.assignment[ass_name][sub_ass_name][sub_ass_attr]['csv'] : "" %>
						<td><%= f.select "assignment[#{ass_name}][#{ass_attr}]['data_function']", options_for_select(["default"], @importer.assignment[ass_name][sub_ass_name][sub_ass_attr]["data_function"]), :include_blank => false %></td>
						<td><%= f.select "assignment[#{ass_name}][#{ass_attr}]['csv']", options_for_select(f.object.analyze_csv, current_sub_ass_attr ), :include_blank => true %>	</td>
					</tr>
				<% end %>
			<% end %>
		<% end%>
	<% end%>
	</table>
	<%= f.submit "speichern" %>
<% end %>