<% if @importer.analyze_csv.blank? %>
	<h1>Es ist ein Fehler aufgetreten</h1>
	<h2>Es sind keine Daten erkannt worden. Ist das Trennzeichen korrekt?</h2>
<% end %>

<%= form_for @importer, :url => admin_import_path(@importer) do |f|%>
	<table class="importer_assoziations">
		<thead>
			<tr>
				<th>Datenbankzuweisung</th>
				<th>Funktion</th>
				<th>Optionen für die Funktion</th>
				<th>Spalte im CSV</th>
			</tr>
		</thead>
		<tbody>
			<% @importer.assignment["Goldencobra::ImportMetadata"] ||= {} %>
			<tr>
				<td class="nested_model_header">Importer Metatags</td>
			</tr>
			<% [:database_owner, :database_admin_first_name, :database_admin_last_name,:database_admin_email, :database_admin_phone, :exported_at].each do |import_attr| %>
			<% @importer.assignment["Goldencobra::ImportMetadata"][import_attr] ||= {} %>
			<tr>
				<td><%= import_attr.to_s.humanize %></td>
				<td><%= f.select "assignment[Goldencobra::ImportMetadata][#{import_attr}][data_function]", options_for_select(Goldencobra::Import::DataFunctions + Goldencobra::ImportMetadata::ImportDataFunctions, @importer.assignment["Goldencobra::ImportMetadata"][import_attr]["data_function"]), :include_blank => false %></td>
				<td><%= text_field_tag "import[assignment[Goldencobra::ImportMetadata][#{import_attr}][option]]", @importer.assignment["Goldencobra::ImportMetadata"][import_attr]["option"] %></td>
				<td><%= f.select "assignment[Goldencobra::ImportMetadata][#{import_attr}][csv]", options_for_select(f.object.analyze_csv, @importer.assignment["Goldencobra::ImportMetadata"][import_attr]["csv"]), :include_blank => true %></td>
			</tr>
			<% end %>

			<tr>
				<td colspan="4"><hr></td>
			</tr>

			<% @importer.assignment_groups ||= {} %>
			<% @importer.assignment_groups[@importer.target_model] ||= "create" %>
			<tr>
				<td class="nested_model_header"><%= @importer.target_model %></td>
				<td><%= f.select "assignment_groups[#{@importer.target_model}]", options_for_select(Goldencobra::Import::DataHandling, @importer.assignment_groups[@importer.target_model]), :include_blank => false %></td>
			</tr>
			<% f.object.get_model_attributes.each do |model_attr| %>
				<% @importer.assignment[@importer.target_model] ||= {} %>
				<% @importer.assignment[@importer.target_model][model_attr] ||= {} %>
				<% target_model_data_functions = defined?(@importer.target_model.constantize::ImportDataFunctions) == "constant" ? @importer.target_model.constantize::ImportDataFunctions : [] %>
				<tr>
					<td><%= model_attr.humanize %></td>
					<td><%= f.select "assignment[#{@importer.target_model}][#{model_attr}][data_function]", options_for_select(Goldencobra::Import::DataFunctions + target_model_data_functions, @importer.assignment[@importer.target_model][model_attr]["data_function"]), :include_blank => false %></td>
					<td><%= text_field_tag "import[assignment[#{@importer.target_model}][#{model_attr}][option]]", @importer.assignment[@importer.target_model][model_attr]["option"] %></td>
					<td><%= f.select "assignment[#{@importer.target_model}][#{model_attr}][csv]", options_for_select(f.object.analyze_csv, @importer.assignment[@importer.target_model][model_attr]["csv"]), :include_blank => true %></td>
				</tr>
			<%end%>
			<tr>
				<td colspan="4"><hr></td>
			</tr>

			<%# für alle KinderModels vom Targetmodel %>
			<% f.object.get_association_names.each do |string_ass_name| %>
				<% #next if f.object.target_model.constantize.new.send(string_ass_name).nil? %>
				<% if f.object.target_model.constantize.new.send(string_ass_name).class == Array  %>
					<% ass_class = f.object.target_model.constantize.new.send(string_ass_name).new.class %>
				<% else %>
					<% ass_class = eval("f.object.target_model.constantize.new.build_#{string_ass_name}.class") %>
				<% end %>

				<%# Soll ein neuer Datensatz angelegt werden oder ein update bestehender %>
				<% @importer.assignment_groups[ass_class.to_s] ||= "create" %>
				<tr class="head" id="<%= string_ass_name %>">
					<td class="nested_model_header">
						<span class="button">Felder anzeigen</span>
						<%= f.object.target_model %> > <%= t(ass_class.to_s, :scope => [:activerecord, :models]) %>
						(<%= string_ass_name %>)
					</td>
					<td><%= f.select "assignment_groups[#{ass_class.to_s}]", options_for_select(Goldencobra::Import::DataHandling, @importer.assignment_groups[ass_class.to_s]), :include_blank => false %></td>
				</tr>


				<% sub_model_data_functions = defined?(ass_class::ImportDataFunctions) == "constant" ? ass_class::ImportDataFunctions : [] %>
				<% ass_class.new.attributes.delete_if{|a| Goldencobra::Import::BlockedAttributes.include?(a.to_s) }.keys.each do |ass_attr| %>
					<tr class="model_group <%= string_ass_name %>">
						<td><%= t(ass_attr, :scope => [:activerecord, :attributes, ass_class.to_s.to_sym]) %></td>
						<% @importer.assignment[ass_class.to_s] ||= {} %>
						<% @importer.assignment[ass_class.to_s][ass_attr] ||= {} %>
						<% @importer.assignment[ass_class.to_s][ass_attr]["data_function"] ||= "" %>
						<% @importer.assignment[ass_class.to_s][ass_attr]["option"] ||= "" %>
						<td><%= f.select "assignment[#{ass_class.to_s}][#{ass_attr}][data_function]", options_for_select(Goldencobra::Import::DataFunctions + sub_model_data_functions, @importer.assignment[ass_class.to_s][ass_attr]["data_function"]), :include_blank => false %></td>
						<td><%= text_field_tag "import[assignment[#{ass_class.to_s}][#{ass_attr}][option]]", @importer.assignment[ass_class.to_s][ass_attr]["option"] %></td>
						<td><%= f.select "assignment[#{ass_class.to_s}][#{ass_attr}][csv]", options_for_select(f.object.analyze_csv, @importer.assignment[ass_class.to_s][ass_attr]['csv'] ), :include_blank => true %>	</td>
				<% end%>
				<tr>
					<td colspan="4"><hr></td>
				</tr>


				<%# jetzt folgt das gleiche nochmal für die submodel von den ass_class-Model %>

				<% f.object.get_association_names(ass_class).each do |sub_ass_name| %>
					<% if ass_class.new.send(sub_ass_name).class == Array %>
						<% sub_ass_class = ass_class.new.send(sub_ass_name).new.class %>
					<% else %>
						<% if ass_class.new.respond_to?("build_#{sub_ass_name}") %>
							<% sub_ass_class = eval("ass_class.new.build_#{sub_ass_name}.class") %>
						<% else %>
							<% next %>
						<% end %>
					<% end %>

					<%# Soll ein neuer Datensatz angelegt werden oder ein update bestehender %>
					<% @importer.assignment_groups["#{ass_class.to_s}_#{sub_ass_class.to_s}_#{sub_ass_name}"] ||= "create" %>
					<tr class="head" id="<%= string_ass_name %>_<%= sub_ass_name %>">
						<td class="nested_model_header">
							<span class="button">Felder anzeigen</span>
							<%= f.object.target_model %> > <%= t(ass_class.to_s, :scope => [:activerecord, :models]) %> > <%= t(sub_ass_class.to_s, :scope => [:activerecord, :models]) %>
							(<%= string_ass_name %>_<%= sub_ass_name %>)
						</td>
						<td><%= f.select "assignment_groups[#{ass_class.to_s}_#{sub_ass_class.to_s}_#{sub_ass_name}]", options_for_select(Goldencobra::Import::DataHandling, @importer.assignment_groups["#{ass_class.to_s}_#{sub_ass_class.to_s}_#{sub_ass_name}"]), :include_blank => false %></td>
					</tr>

					<% sub_model_data_functions = defined?(sub_ass_class::ImportDataFunctions) == "constant" ? sub_ass_class::ImportDataFunctions : [] %>
					<% sub_ass_class.new.attributes.delete_if{|a| Goldencobra::Import::BlockedAttributes.include?(a.to_s) }.keys.each do |sub_ass_attr| %>
						<tr class="model_group <%= "#{string_ass_name}_#{sub_ass_name}" %>">
							<td><%= t(sub_ass_attr, :scope => [:activerecord, :attributes, sub_ass_class.to_s.to_sym]) %></td>
							<% @importer.assignment[ass_class.to_s] ||= {} %>
							<% @importer.assignment[ass_class.to_s][sub_ass_class.to_s] ||= {} %>
							<% @importer.assignment[ass_class.to_s][sub_ass_class.to_s][sub_ass_name] ||= {} %>
							<% @importer.assignment[ass_class.to_s][sub_ass_class.to_s][sub_ass_name][sub_ass_attr] ||= {} %>
							<% @importer.assignment[ass_class.to_s][sub_ass_class.to_s][sub_ass_name][sub_ass_attr]["data_function"] ||= "" %>
							<% @importer.assignment[ass_class.to_s][sub_ass_class.to_s][sub_ass_name][sub_ass_attr]["option"] ||= "" %>
							<% @importer.assignment[ass_class.to_s][sub_ass_class.to_s][sub_ass_name][sub_ass_attr]["csv"] ||= "" %>
							<td><%= f.select "assignment[#{ass_class.to_s}][#{sub_ass_class.to_s}][#{sub_ass_name}][#{sub_ass_attr}][data_function]", options_for_select(Goldencobra::Import::DataFunctions + sub_model_data_functions, @importer.assignment[ass_class.to_s][sub_ass_class.to_s][sub_ass_name][sub_ass_attr]["data_function"]), :include_blank => false %></td>
							<td><%= text_field_tag "import[assignment[#{ass_class.to_s}][#{sub_ass_class.to_s}][#{sub_ass_name}][#{sub_ass_attr}][option]]", @importer.assignment[ass_class.to_s][sub_ass_class.to_s][sub_ass_name][sub_ass_attr]["option"] %></td>
							<td><%= f.select "assignment[#{ass_class.to_s}][#{sub_ass_class.to_s}][#{sub_ass_name}][#{sub_ass_attr}][csv]", options_for_select(f.object.analyze_csv, @importer.assignment[ass_class.to_s][sub_ass_class.to_s][sub_ass_name][sub_ass_attr]['csv'] ), :include_blank => true %>	</td>
					<% end%>

					<tr>
						<td colspan="4"><hr></td>
					</tr>
				<% end %>
			<% end%>
		</tbody>
	</table>
	<%= f.submit "speichern" %>
<% end %>

<br><br>

<div style="width:1000px;overflow:scroll;border:1px solid grey;padding:15px">
	<h2>Erkannte Daten</h2>
	<h3>Bitte prüfen Sie auch die ausgewählte Zeichencodierung! Nach dem Import ist diese nicht mehr Änderbar.</h3>
	<% conv = Iconv.new("UTF-8", @importer.encoding_type) %>
	<table>
		<thead>
			<tr>
					<th>Zeile</th>
				<% @importer.analyze_csv.each do |a| %>
				  <th><%= a[0] %></th>
				<% end %>
			</tr>
		</thead>
		<tbody>
			<% @importer.data_rows.each_with_index do |a,index| %>
			<tr>
					<td><%= index %></td>
				<% a.each do |column| %>
					<td><%= conv.iconv(column) %></td>
				<% end %>
			</tr>
			<% end %>
		</tbody>
	</table>
</div>